/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package matthew_klein.musicdbphase4;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;
import java.sql.ResultSet;
import javax.swing.*;
import java.sql.*;
import java.util.ArrayList;

/**
 *
 * @author mklein
 */
public class LauncherForm extends javax.swing.JFrame {

    /**
     * Creates new form LauncherForm
     */
    public LauncherForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Band = new javax.swing.JFrame();
        memCountBand = new javax.swing.JTextField();
        dateFoundBand = new javax.swing.JTextField();
        bandName = new javax.swing.JTextField();
        ScrollPaneBand = new javax.swing.JScrollPane();
        bandList = new javax.swing.JList<>();
        bandNameLabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        RefreshBand = new javax.swing.JButton();
        ActiveBand = new javax.swing.JCheckBox();
        HiringBand = new javax.swing.JCheckBox();
        newBand = new javax.swing.JButton();
        deleteBand = new javax.swing.JButton();
        saveBand = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        Album = new javax.swing.JFrame();
        ScrollPane2 = new javax.swing.JScrollPane();
        albumList = new javax.swing.JList<>();
        refreshAlbum = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        album_name = new javax.swing.JLabel();
        band_name = new javax.swing.JLabel();
        songNum = new javax.swing.JLabel();
        release = new javax.swing.JLabel();
        sales = new javax.swing.JLabel();
        genre = new javax.swing.JLabel();
        albumNameField = new javax.swing.JTextField();
        bandNameField = new javax.swing.JTextField();
        songCountField = new javax.swing.JTextField();
        releaseDateField = new javax.swing.JTextField();
        salesNumField = new javax.swing.JTextField();
        genreField = new javax.swing.JTextField();
        newAlbum = new javax.swing.JButton();
        deleteAlbum = new javax.swing.JButton();
        saveAlbum = new javax.swing.JButton();
        newInd = new javax.swing.JLabel();
        SongFrame = new javax.swing.JFrame();
        songScrollPane = new javax.swing.JScrollPane();
        songList = new javax.swing.JList<>();
        songNameField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        bandNameFieldSong = new javax.swing.JTextField();
        albumNameFieldSong = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        playCountField = new javax.swing.JTextField();
        newSong = new javax.swing.JButton();
        refreshSongs = new javax.swing.JButton();
        saveSong = new javax.swing.JButton();
        newSongInfo = new javax.swing.JLabel();
        deleteSong = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        Band_table = new javax.swing.JButton();
        albumTable = new javax.swing.JButton();
        songTable = new javax.swing.JButton();

        Band.setMinimumSize(new java.awt.Dimension(750, 500));

        memCountBand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                memCountBandActionPerformed(evt);
            }
        });

        dateFoundBand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateFoundBandActionPerformed(evt);
            }
        });

        bandName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bandNameActionPerformed(evt);
            }
        });

        bandList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        bandList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                bandListValueChanged(evt);
            }
        });
        ScrollPaneBand.setViewportView(bandList);

        bandNameLabel.setText("Band Name");

        jLabel4.setText("Date Founded");

        jLabel2.setText("Member Count");

        RefreshBand.setText("Refresh");
        RefreshBand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshBandActionPerformed(evt);
            }
        });

        ActiveBand.setText("Active");
        ActiveBand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ActiveBandActionPerformed(evt);
            }
        });

        HiringBand.setText("Hiring");

        newBand.setText("New");
        newBand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newBandActionPerformed(evt);
            }
        });

        deleteBand.setText("Delete");
        deleteBand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBandActionPerformed(evt);
            }
        });

        saveBand.setText("Save");
        saveBand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBandActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel1.setText("Bands");
        jLabel1.setPreferredSize(new java.awt.Dimension(90, 40));

        javax.swing.GroupLayout BandLayout = new javax.swing.GroupLayout(Band.getContentPane());
        Band.getContentPane().setLayout(BandLayout);
        BandLayout.setHorizontalGroup(
            BandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BandLayout.createSequentialGroup()
                .addGroup(BandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(BandLayout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(ScrollPaneBand, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(BandLayout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(RefreshBand)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 67, Short.MAX_VALUE)
                .addGroup(BandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(BandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BandLayout.createSequentialGroup()
                            .addComponent(bandName, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(154, 154, 154))
                        .addGroup(BandLayout.createSequentialGroup()
                            .addGroup(BandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(HiringBand)
                                .addGroup(BandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(memCountBand)
                                    .addComponent(dateFoundBand)))
                            .addContainerGap()))
                    .addGroup(BandLayout.createSequentialGroup()
                        .addGroup(BandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addGroup(BandLayout.createSequentialGroup()
                                .addGroup(BandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(newBand)
                                    .addComponent(ActiveBand))
                                .addGap(18, 18, 18)
                                .addComponent(deleteBand)
                                .addGap(18, 18, 18)
                                .addComponent(saveBand))
                            .addComponent(bandNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())))
        );
        BandLayout.setVerticalGroup(
            BandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BandLayout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(BandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RefreshBand)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bandNameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(BandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ScrollPaneBand, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(BandLayout.createSequentialGroup()
                        .addComponent(bandName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dateFoundBand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(memCountBand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(43, 43, 43)
                        .addComponent(ActiveBand)
                        .addGap(28, 28, 28)
                        .addComponent(HiringBand)
                        .addGap(18, 18, 18)
                        .addGroup(BandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(newBand)
                            .addComponent(deleteBand)
                            .addComponent(saveBand))))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        Album.setMinimumSize(new java.awt.Dimension(750, 500));

        albumList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        albumList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                albumListValueChanged(evt);
            }
        });
        ScrollPane2.setViewportView(albumList);

        refreshAlbum.setText("Refresh");
        refreshAlbum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshAlbumActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel3.setText("Album");

        album_name.setText("album_name");

        band_name.setText("band_name");

        songNum.setText("song_count");

        release.setText("release_date");

        sales.setText("sales_num");

        genre.setText("genre");

        albumNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                albumNameFieldActionPerformed(evt);
            }
        });

        releaseDateField.setToolTipText("");

        salesNumField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salesNumFieldActionPerformed(evt);
            }
        });

        newAlbum.setText("New");
        newAlbum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newAlbumActionPerformed(evt);
            }
        });

        deleteAlbum.setText("Delete");
        deleteAlbum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteAlbumActionPerformed(evt);
            }
        });

        saveAlbum.setText("Save");
        saveAlbum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAlbumActionPerformed(evt);
            }
        });

        newInd.setText("New");
        newInd.setToolTipText("");

        javax.swing.GroupLayout AlbumLayout = new javax.swing.GroupLayout(Album.getContentPane());
        Album.getContentPane().setLayout(AlbumLayout);
        AlbumLayout.setHorizontalGroup(
            AlbumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AlbumLayout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addGroup(AlbumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AlbumLayout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(80, 80, 80)
                        .addComponent(refreshAlbum)
                        .addGap(18, 18, 18)
                        .addComponent(newInd))
                    .addGroup(AlbumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(AlbumLayout.createSequentialGroup()
                            .addComponent(newAlbum)
                            .addGap(33, 33, 33)
                            .addComponent(deleteAlbum)
                            .addGap(37, 37, 37)
                            .addComponent(saveAlbum))
                        .addGroup(AlbumLayout.createSequentialGroup()
                            .addComponent(ScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(44, 44, 44)
                            .addGroup(AlbumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(AlbumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(album_name, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(band_name, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(songNum))
                                .addGroup(AlbumLayout.createSequentialGroup()
                                    .addComponent(release)
                                    .addGap(7, 7, 7))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, AlbumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(genre, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(sales, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGap(18, 18, 18)
                            .addGroup(AlbumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(bandNameField)
                                .addComponent(albumNameField)
                                .addComponent(songCountField)
                                .addComponent(releaseDateField)
                                .addComponent(salesNumField)
                                .addComponent(genreField, javax.swing.GroupLayout.DEFAULT_SIZE, 221, Short.MAX_VALUE)))))
                .addContainerGap(106, Short.MAX_VALUE))
        );
        AlbumLayout.setVerticalGroup(
            AlbumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AlbumLayout.createSequentialGroup()
                .addContainerGap(42, Short.MAX_VALUE)
                .addGroup(AlbumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(refreshAlbum)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newInd))
                .addGap(18, 18, 18)
                .addGroup(AlbumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(AlbumLayout.createSequentialGroup()
                        .addGroup(AlbumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(album_name)
                            .addComponent(albumNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(25, 25, 25)
                        .addGroup(AlbumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(band_name)
                            .addComponent(bandNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addGroup(AlbumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(songNum)
                            .addComponent(songCountField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31)
                        .addGroup(AlbumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(release)
                            .addComponent(releaseDateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31)
                        .addGroup(AlbumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(sales)
                            .addComponent(salesNumField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(39, 39, 39)
                        .addGroup(AlbumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(genre)
                            .addComponent(genreField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(2, 2, 2)
                .addGroup(AlbumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newAlbum)
                    .addComponent(deleteAlbum)
                    .addComponent(saveAlbum))
                .addGap(57, 57, 57))
        );

        SongFrame.setMinimumSize(new java.awt.Dimension(750, 500));

        songList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        songList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                songListValueChanged(evt);
            }
        });
        songScrollPane.setViewportView(songList);

        songNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                songNameFieldActionPerformed(evt);
            }
        });

        jLabel5.setText("Song name:");

        jLabel6.setText("Band name:");

        jLabel7.setText("Album name:");

        bandNameFieldSong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bandNameFieldSongActionPerformed(evt);
            }
        });

        jLabel8.setText("Play count:");

        newSong.setText("New");
        newSong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newSongActionPerformed(evt);
            }
        });

        refreshSongs.setText("Refresh");
        refreshSongs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshSongsActionPerformed(evt);
            }
        });

        saveSong.setText("Save");
        saveSong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveSongActionPerformed(evt);
            }
        });

        newSongInfo.setText("Enter New Song Information (no duplicate song names)");

        deleteSong.setText("Delete");
        deleteSong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteSongActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel9.setText("Songs");

        javax.swing.GroupLayout SongFrameLayout = new javax.swing.GroupLayout(SongFrame.getContentPane());
        SongFrame.getContentPane().setLayout(SongFrameLayout);
        SongFrameLayout.setHorizontalGroup(
            SongFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SongFrameLayout.createSequentialGroup()
                .addGap(71, 71, 71)
                .addGroup(SongFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(songScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(SongFrameLayout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(refreshSongs, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 69, Short.MAX_VALUE)
                .addGroup(SongFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(newSongInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(SongFrameLayout.createSequentialGroup()
                        .addGroup(SongFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(SongFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(songNameField)
                            .addComponent(bandNameFieldSong)
                            .addComponent(albumNameFieldSong)
                            .addComponent(playCountField, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(SongFrameLayout.createSequentialGroup()
                        .addComponent(newSong, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(saveSong, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(deleteSong, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(49, Short.MAX_VALUE))
        );
        SongFrameLayout.setVerticalGroup(
            SongFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SongFrameLayout.createSequentialGroup()
                .addGroup(SongFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SongFrameLayout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(SongFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(refreshSongs)
                            .addGroup(SongFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel9)
                                .addComponent(newSongInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(songScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SongFrameLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(SongFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(songNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(32, 32, 32)
                        .addGroup(SongFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(bandNameFieldSong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(33, 33, 33)
                        .addGroup(SongFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(albumNameFieldSong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(37, 37, 37)
                        .addGroup(SongFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(playCountField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))
                        .addGap(43, 43, 43)
                        .addGroup(SongFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(newSong)
                            .addComponent(saveSong)
                            .addComponent(deleteSong))))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(750, 500));

        Band_table.setText("Band Table");
        Band_table.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Band_tableActionPerformed(evt);
            }
        });

        albumTable.setText("Album Table");
        albumTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                albumTableActionPerformed(evt);
            }
        });

        songTable.setText("Song Table");
        songTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                songTableActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(87, Short.MAX_VALUE)
                .addComponent(albumTable, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(80, 80, 80)
                .addComponent(Band_table, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(90, 90, 90)
                .addComponent(songTable, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(69, 69, 69))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(209, 209, 209)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(songTable, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Band_table, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(albumTable, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(209, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Band_tableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Band_tableActionPerformed
        Band.setVisible(true);
        refreshBand();
    }//GEN-LAST:event_Band_tableActionPerformed

    private void bandNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bandNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bandNameActionPerformed

    private void bandListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_bandListValueChanged
        int index = bandList.getSelectedIndex();

        //if statment added to prevent errors, when refreshing ListSelectionEvent
        //is triggered but index selected is -1 resulting in an error
        if(index >= 0){
            System.out.println("Index Selected: " + index);
            String s = (String) bandList.getSelectedValue();
            System.out.println("Value Selected: " + s);
            String[] parts = s.split("-");
            String bandName = parts[0].trim();
            System.out.println("BandName: " + bandName);
            updateformBand(bandName);
        }
        bandNameLabel.setText("Band Name");
        bandName.setEditable(false);
        // TODO add your handling code here:
    }//GEN-LAST:event_bandListValueChanged

    private void memCountBandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_memCountBandActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_memCountBandActionPerformed

    private void RefreshBandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshBandActionPerformed
        refreshBand();
    }//GEN-LAST:event_RefreshBandActionPerformed

    private void ActiveBandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ActiveBandActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ActiveBandActionPerformed

    private void dateFoundBandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateFoundBandActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dateFoundBandActionPerformed

    private void newBandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newBandActionPerformed
        memCountBand.setText("");
        dateFoundBand.setText("");
        ActiveBand.setSelected(false);
        HiringBand.setSelected(false);
        
        bandName.setText("Enter new band name");
        bandName.setEditable(true);
        bandNameLabel.setText("Band Name(new)");
    }//GEN-LAST:event_newBandActionPerformed

    private void deleteBandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBandActionPerformed
        try{
            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/musiclabelproject", "root","4771");
            String delStr = "Delete from band where band_name = '"+ bandName.getText() + "'";
        
            System.out.println(delStr);
            PreparedStatement pstmt = connection.prepareStatement(delStr);
            pstmt.executeUpdate();
            
            bandName.setText("");
            memCountBand.setText("");
            dateFoundBand.setText("");
            ActiveBand.setSelected(false);
            HiringBand.setSelected(false);
            refreshBand();
            
        }catch (Exception exception) {
            exception.printStackTrace();
        }
    }//GEN-LAST:event_deleteBandActionPerformed

    private void saveBandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBandActionPerformed
        ArrayList<String> names = new ArrayList<>();
        
        try {
          //Hiring.setSelected(true);
                    Class.forName("com.mysql.jdbc.Driver");
                    Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/musiclabelproject", "root","4771");

                    String query = "select band_name from band order by band_name";

                    Statement sta = connection.createStatement();
                    ResultSet rs = sta.executeQuery(query);  
                    DefaultListModel listModel;
                    listModel = new DefaultListModel();
                    while (rs.next()) {
                        names.add(rs.getString("band_name")); 
                    }
                    
                    int act =0;
                    int hir =0;
                    if(ActiveBand.isSelected()){act =1;}
                    if(HiringBand.isSelected()){hir =1;}
                    
                    
                    if(names.contains(bandName.getText())){
                        
                       String sql = "Update band set member_count ="+ Integer.valueOf(memCountBand.getText()) +
                               ",date_founded ='"+ dateFoundBand.getText()+ "',is_active="+  act + 
                               ", is_hiring =" + hir +" WHERE band_name = '" + bandName.getText()+"'";
                       
                        System.out.println(sql);
                        PreparedStatement pstmt = connection.prepareStatement(sql);
                        pstmt.executeUpdate();
                    }
                    else{
                        String sql = "Insert into band values('" + bandName.getText()+ "',"+ 
                                memCountBand.getText()+ ",'"+ dateFoundBand.getText() + "'," +
                                act+ ","+ hir+")";
                            
                        System.out.println(sql);
                        PreparedStatement pstmt = connection.prepareStatement(sql);
                        pstmt.executeUpdate();  
                        }
                    
                    connection.close();
                } catch (Exception exception) {
                    exception.printStackTrace();
                }
    refreshBand();
         
    }//GEN-LAST:event_saveBandActionPerformed

        public void updateformBand(String band_name){
    try {
                    Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/musiclabelproject", "root","4771");
 
                    String query = "select * from band where band_name = '"+ band_name+ "'";

                    Statement sta = connection.createStatement();
                    ResultSet rs = sta.executeQuery(query);  
                    while (rs.next()) {
                       bandName.setText(rs.getString("band_name"));
                       memCountBand.setText(rs.getString("member_count"));
                       dateFoundBand.setText(rs.getString("date_founded"));

                       ActiveBand.setSelected(rs.getInt("is_active") == 1);
                       HiringBand.setSelected(rs.getInt("is_hiring") == 1);
                       
                    } 
                
                    connection.close();
                } catch (Exception exception) {
                    exception.printStackTrace();
                }
}
    
    public void refreshBand(){
        try {
          //Hiring.setSelected(true);
            Class.forName("com.mysql.jdbc.Driver");
            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/musiclabelproject", "root","4771");

            String query = "select * from band order by band_name";

            Statement sta = connection.createStatement();
            ResultSet rs = sta.executeQuery(query);  
            DefaultListModel listModel;
            listModel = new DefaultListModel();
            while (rs.next()) {
                listModel.addElement(rs.getString("band_name")); 
            }
            bandList.setModel(listModel);
                
            connection.close();
        } catch (Exception exception) {
            exception.printStackTrace();
        }
        
        bandName.setEditable(false);
}
      
    private void albumListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_albumListValueChanged
        int index = albumList.getSelectedIndex();
        newInd.setText("");
        albumNameField.setEditable(false);

        //if statment added to prevent errors, when refreshing ListSelectionEvent
        //is triggered but index selected is -1 resulting in an error
        if(index >= 0){
            System.out.println("Index Selected: " + index);
            String s = (String) albumList.getSelectedValue();
            System.out.println("Value Selected: " + s);
            String[] parts = s.split("-");
            String albumName = parts[0].trim();
            System.out.println("Album Name: " + albumName);
            albumUpdateform(albumName);
        }
    }//GEN-LAST:event_albumListValueChanged

    
    public void albumUpdateform(String album_name){
    try {
                    Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/musiclabelproject", "root","4771");
 
                    String query = "select * from album where album_name = '"+ album_name+ "'";

                    Statement sta = connection.createStatement();
                    ResultSet rs = sta.executeQuery(query);  
                    while (rs.next()) {
                       albumNameField.setText(rs.getString("album_name"));
                       bandNameField.setText(rs.getString("band_name"));
                       songCountField.setText(rs.getString("song_count"));
                       releaseDateField.setText(rs.getString("release_date"));
                       salesNumField.setText(rs.getString("sales_num"));
                       genreField.setText(rs.getString("genre"));
                       
                       //Active.setSelected(rs.getInt("is_active") == 1);
                       //Hiring.setSelected(rs.getInt("is_hiring") == 1);
                       
                    } 
                
                    connection.close();
                } catch (Exception exception) {
                    exception.printStackTrace();
                } 
}
    
    private void refreshAlbumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshAlbumActionPerformed
        refreshAlbum();
    }//GEN-LAST:event_refreshAlbumActionPerformed

    private void albumNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_albumNameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_albumNameFieldActionPerformed

    private void salesNumFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salesNumFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_salesNumFieldActionPerformed

    private void newAlbumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newAlbumActionPerformed
        refreshAlbum();
        albumNameField.setText("");
        albumNameField.setEditable(true);
        bandNameField.setText("");
        songCountField.setText("");
        releaseDateField.setText("");
        salesNumField.setText("");
        genreField.setText("");
        newInd.setText("New");
    }//GEN-LAST:event_newAlbumActionPerformed

    private void deleteAlbumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteAlbumActionPerformed
        try{
            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/musiclabelproject", "root","4771");
            String albumName = albumNameField.getText();
            String SQL_DELETE_SONGS = "delete from song where album_name=?";
            PreparedStatement stmnt = connection.prepareStatement(SQL_DELETE_SONGS);

            stmnt.setString(1, albumName);

            int row = stmnt.executeUpdate();

            //rows updated
            System.out.println(row);

            String SQL_DELETE_ALBUM = "delete from album where album_name=?";
            PreparedStatement stmnt2 = connection.prepareStatement(SQL_DELETE_ALBUM);

            stmnt2.setString(1, albumName);

            row = stmnt2.executeUpdate();

            //rows updated
            System.out.println(row);

            connection.close();
        }catch (Exception e){
            e.printStackTrace();
        }
        refreshAlbum();
    }//GEN-LAST:event_deleteAlbumActionPerformed

     private void refreshAlbum() {
        try {
          //Hiring.setSelected(true);
                    Class.forName("com.mysql.jdbc.Driver");
                    Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/musiclabelproject", "root","4771");

                    String query = "select * from album order by album_name";

                    Statement sta = connection.createStatement();
                    ResultSet rs = sta.executeQuery(query);  
                    DefaultListModel listModel;
                    listModel = new DefaultListModel();
                    while (rs.next()) {
                        listModel.addElement(rs.getString("album_name")); 
                    }
                    albumList.setModel(listModel);
                
                    connection.close();
                } catch (Exception exception) {
                    exception.printStackTrace();
                }
    }
    
    private void saveAlbumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAlbumActionPerformed
        try{
            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/musiclabelproject", "root","4771");
            //int id = Integer.parseInt(userId.getText());
            String albumName = albumNameField.getText();
            String bandName = bandNameField.getText();
            String songCount = songCountField.getText();
            String releaseDate = releaseDateField.getText();
            String salesNum = salesNumField.getText();
            String genre = genreField.getText();

            if(albumName.equals("")){
                System.out.println("ENTER ALBUM NAME");
            }else if(newInd.getText().equals("New")){
                String SQL_INSERT = "insert into album (album_name,band_name,song_count,release_date,sales_num,genre) VALUES (?,?,?,?,?,?)";
                PreparedStatement stmnt = connection.prepareStatement(SQL_INSERT);

                stmnt.setString(1, albumName);
                stmnt.setString(2, bandName);
                stmnt.setString(3, songCount);
                stmnt.setString(4, releaseDate);
                stmnt.setString(5, salesNum);
                stmnt.setString(6, genre);

                int row = stmnt.executeUpdate();

                //this.count++;
                //rows affected
                System.out.println(row);

            }   else{ //update
                String SQL_UPDATE = "update album set album_name=?,band_name=?,song_count=?,release_date=?,sales_num=?,genre=? where album_name=?";

                PreparedStatement stmnt = connection.prepareStatement(SQL_UPDATE);

                stmnt.setString(1, albumName);
                stmnt.setString(2, bandName);
                stmnt.setString(3, songCount);
                stmnt.setString(4, releaseDate);
                stmnt.setString(5, salesNum);
                stmnt.setString(6, genre);
                stmnt.setString(7, albumName);

                int row = stmnt.executeUpdate();

                //rows affected
                System.out.println(row);
            }
            connection.close();
        }catch (Exception e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_saveAlbumActionPerformed

    
     
    
    
    
    
    private void songListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_songListValueChanged
        int index = songList.getSelectedIndex();

        if(index >= 0){

            //printed statements to console
            System.out.print("Index selected:" + index);
            String s = (String) songList.getSelectedValue();
            System.out.println("Value selected:" + s);
            String [] parts = s.split("-");
            String songName = parts[0].trim();
            System.out.println("Song name: " + songName);
            updateSongForm(songName);
        }
    }//GEN-LAST:event_songListValueChanged

    private void songNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_songNameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_songNameFieldActionPerformed

    private void bandNameFieldSongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bandNameFieldSongActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bandNameFieldSongActionPerformed

    private void newSongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newSongActionPerformed
        // TODO add your handling code here:
        newSongInfo.setVisible(true);
        songNameField.setText("");
        bandNameFieldSong.setText("");
        albumNameFieldSong.setText("");
        playCountField.setText("");
        songNameField.setEditable(true);
        bandNameFieldSong.setEditable(true);
        albumNameFieldSong.setEditable(true);
        playCountField.setEditable(true);
        
        
    }//GEN-LAST:event_newSongActionPerformed

    private void saveSongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveSongActionPerformed

        
        ArrayList<String> songNames = new ArrayList<>();
        
        try {
          //Hiring.setSelected(true);
                    Class.forName("com.mysql.jdbc.Driver");
                    Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/musiclabelproject", "root","4771");

                    String query = "select song_name from song order by song_name";

                    Statement sta = connection.createStatement();
                    ResultSet rs = sta.executeQuery(query);  
                    DefaultListModel listModel;
                    listModel = new DefaultListModel();
                    while (rs.next()) {
                        songNames.add(rs.getString("song_name")); 
                    }
                    
                    int act =0;
                    int hir =0;
                    if(ActiveBand.isSelected()){act =1;}
                    if(HiringBand.isSelected()){hir =1;}
                    
                    
                    if(songNames.contains(songNameField.getText())){
                        
                       boolean bool = sta.execute("Update song set play_count ="+ Integer.valueOf(playCountField.getText()) +
                               " WHERE song_name = '" + songNameField.getText()+"'");
                       if(!bool){
                            JOptionPane.showMessageDialog(this, "Updated");
                        }else{
                            JOptionPane.showMessageDialog(this, "Error! Try again.");
                        }
                        
                    }
                    else{
                        boolean bool = sta.execute("insert into song values('"+songNameField.getText()+"','"+bandNameFieldSong.getText()+"','"+albumNameFieldSong.getText()+"',"+playCountField.getText()+")");
                        if(!bool){
                            JOptionPane.showMessageDialog(this, "Inserted");
                        }else{
                            JOptionPane.showMessageDialog(this, "Error! Try again.");
                        }
 
                    }
                    
                    connection.close();
                } catch (Exception exception) {
                    exception.printStackTrace();
                }
        

        refreshSongFrame();

    }//GEN-LAST:event_saveSongActionPerformed

    private void deleteSongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteSongActionPerformed
        try{
            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/musiclabelproject", "root","4771");
            String name  = songList.getSelectedValue();
            String delStr = "Delete from song where song_name = '"+ name + "'";

            System.out.println(delStr);
            PreparedStatement pstmt = connection.prepareStatement(delStr);
            pstmt.executeUpdate();

            songNameField.setText("");
            bandNameFieldSong.setText("");
            albumNameFieldSong.setText("");
            playCountField.setText("");
            refreshSongFrame();

        }catch (Exception exception) {
            exception.printStackTrace();
        }
        
        
    }//GEN-LAST:event_deleteSongActionPerformed

    
     public void updateSongForm(String song_name){
        try{
                    Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/musiclabelproject", "root","4771");
 
                    String query = "select * from song where song_name = '"+ song_name+ "'";

                    Statement sta = connection.createStatement();
                    ResultSet rs = sta.executeQuery(query);  
                    while(rs.next()){
                        songNameField.setText(rs.getString("song_name"));
                        albumNameFieldSong.setText(rs.getString("album_name"));
                        bandNameFieldSong.setText(rs.getString("band_name"));
                        playCountField.setText(Integer.toString(rs.getInt("play_count")));
                    }
                    connection.close();
        }catch(Exception e){
            e.printStackTrace();
        }
    }
    
     public void refreshSongFrame(){
        newSongInfo.setVisible(false);
        try{
            Class.forName("com.mysql.jdbc.Driver");
            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/musiclabelproject", "root","4771");

                    String query = "select * from song order by song_name";

                    Statement sta = connection.createStatement();
                    ResultSet rs = sta.executeQuery(query);  
                    DefaultListModel listModel;
                    listModel = new DefaultListModel();
                    while (rs.next()) {
                        listModel.addElement(rs.getString("song_name")); 
                    }
                    songList.setModel(listModel);
                
                    connection.close();
        }catch(Exception e){
            e.printStackTrace();
        }
        
        songNameField.setEditable(false);
        bandNameFieldSong.setEditable(false);
        albumNameFieldSong.setEditable(false);
    }
     
    private void albumTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_albumTableActionPerformed
        Album.setVisible(true);
        refreshAlbum();
    }//GEN-LAST:event_albumTableActionPerformed

    private void songTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_songTableActionPerformed
        // TODO add your handling code here:
        SongFrame.setVisible(true);
        refreshSongFrame();
    }//GEN-LAST:event_songTableActionPerformed

    private void refreshSongsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshSongsActionPerformed
       refreshSongFrame();
    }//GEN-LAST:event_refreshSongsActionPerformed

    

    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LauncherForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LauncherForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LauncherForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LauncherForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LauncherForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox ActiveBand;
    private javax.swing.JFrame Album;
    private javax.swing.JFrame Band;
    private javax.swing.JButton Band_table;
    private javax.swing.JCheckBox HiringBand;
    private javax.swing.JButton RefreshBand;
    private javax.swing.JScrollPane ScrollPane2;
    private javax.swing.JScrollPane ScrollPaneBand;
    private javax.swing.JFrame SongFrame;
    private javax.swing.JList<String> albumList;
    private javax.swing.JTextField albumNameField;
    private javax.swing.JTextField albumNameFieldSong;
    private javax.swing.JButton albumTable;
    private javax.swing.JLabel album_name;
    private javax.swing.JList<String> bandList;
    private javax.swing.JTextField bandName;
    private javax.swing.JTextField bandNameField;
    private javax.swing.JTextField bandNameFieldSong;
    private javax.swing.JLabel bandNameLabel;
    private javax.swing.JLabel band_name;
    private javax.swing.JTextField dateFoundBand;
    private javax.swing.JButton deleteAlbum;
    private javax.swing.JButton deleteBand;
    private javax.swing.JButton deleteSong;
    private javax.swing.JLabel genre;
    private javax.swing.JTextField genreField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField memCountBand;
    private javax.swing.JButton newAlbum;
    private javax.swing.JButton newBand;
    private javax.swing.JLabel newInd;
    private javax.swing.JButton newSong;
    private javax.swing.JLabel newSongInfo;
    private javax.swing.JTextField playCountField;
    private javax.swing.JButton refreshAlbum;
    private javax.swing.JButton refreshSongs;
    private javax.swing.JLabel release;
    private javax.swing.JTextField releaseDateField;
    private javax.swing.JLabel sales;
    private javax.swing.JTextField salesNumField;
    private javax.swing.JButton saveAlbum;
    private javax.swing.JButton saveBand;
    private javax.swing.JButton saveSong;
    private javax.swing.JTextField songCountField;
    private javax.swing.JList<String> songList;
    private javax.swing.JTextField songNameField;
    private javax.swing.JLabel songNum;
    private javax.swing.JScrollPane songScrollPane;
    private javax.swing.JButton songTable;
    // End of variables declaration//GEN-END:variables
}
